// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ProcedureMakerServer;

#nullable disable

namespace ProcedureMakerServer.Migrations
{
    [DbContext(typeof(ProcedureContext))]
    partial class ProcedureContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EFCoreBase.Entities.Case", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CaseNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<string>("CourtAffairNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CourtNumber")
                        .HasColumnType("integer");

                    b.Property<int>("CourtType")
                        .HasColumnType("integer");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ManagerLawyerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ManagerLawyerId");

                    b.ToTable("Cases");
                });

            modelBuilder.Entity("ProcedureMakerServer.Authentication.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("RoleType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("ProcedureMakerServer.Authentication.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ProcedureMakerServer.Authentication.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("ProcedureMakerServer.Billing.StatementEntities.AccountStatement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CaseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LawyerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CaseId")
                        .IsUnique();

                    b.HasIndex("LawyerId");

                    b.ToTable("AccountStatements");
                });

            modelBuilder.Entity("ProcedureMakerServer.Billing.StatementEntities.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BillingElementId")
                        .HasColumnType("uuid");

                    b.Property<bool>("HasPersonalizedBillingElement")
                        .HasColumnType("boolean");

                    b.Property<decimal>("HoursWorked")
                        .HasColumnType("numeric");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BillingElementId");

                    b.HasIndex("InvoiceId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("ProcedureMakerServer.Billing.StatementEntities.BillingElement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountStatementGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountStatementId")
                        .HasColumnType("uuid");

                    b.Property<string>("ActivityName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsHourlyRate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPersonalizedBillingElement")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("AccountStatementId");

                    b.ToTable("BillingElements");
                });

            modelBuilder.Entity("ProcedureMakerServer.Billing.StatementEntities.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountStatementId")
                        .HasColumnType("uuid");

                    b.Property<int>("InvoiceStatus")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AccountStatementId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("ProcedureMakerServer.Billing.StatementEntities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("AmountPaidDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("ProcedureMakerServer.Entities.CasePart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CaseId")
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CourtRole")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Fax")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<bool>("HasJuridicalAid")
                        .HasColumnType("boolean");

                    b.Property<string>("HomePhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MobilePhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NotificationEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PostalCase")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SocialSecurityNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WorkPhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.ToTable("CaseParts");
                });

            modelBuilder.Entity("ProcedureMakerServer.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CourtRole")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Fax")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<bool>("HasJuridicalAid")
                        .HasColumnType("boolean");

                    b.Property<string>("HomePhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("LawyerId")
                        .HasColumnType("uuid");

                    b.Property<string>("MobilePhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NotificationEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PostalCase")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SocialSecurityNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WorkPhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LawyerId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("ProcedureMakerServer.Entities.Lawyer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CourtLockerNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CourtRole")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Fax")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<bool>("HasJuridicalAid")
                        .HasColumnType("boolean");

                    b.Property<string>("HomePhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MobilePhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NotificationEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PostalCase")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SocialSecurityNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("WorkPhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Lawyers");
                });

            modelBuilder.Entity("ProcedureMakerServer.Trusts.Trust", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Trusts");
                });

            modelBuilder.Entity("ProcedureMakerServer.Trusts.TrustDisburse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TrustId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TrustId");

                    b.ToTable("TrustDisburses");
                });

            modelBuilder.Entity("ProcedureMakerServer.Trusts.TrustPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TrustId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TrustId");

                    b.ToTable("TrustPayments");
                });

            modelBuilder.Entity("EFCoreBase.Entities.Case", b =>
                {
                    b.HasOne("ProcedureMakerServer.Entities.Client", "Client")
                        .WithMany("Cases")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProcedureMakerServer.Entities.Lawyer", "ManagerLawyer")
                        .WithMany("Cases")
                        .HasForeignKey("ManagerLawyerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("ManagerLawyer");
                });

            modelBuilder.Entity("ProcedureMakerServer.Authentication.UserRole", b =>
                {
                    b.HasOne("ProcedureMakerServer.Authentication.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProcedureMakerServer.Authentication.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProcedureMakerServer.Billing.StatementEntities.AccountStatement", b =>
                {
                    b.HasOne("EFCoreBase.Entities.Case", "Case")
                        .WithOne("AccountStatement")
                        .HasForeignKey("ProcedureMakerServer.Billing.StatementEntities.AccountStatement", "CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProcedureMakerServer.Entities.Lawyer", "Lawyer")
                        .WithMany()
                        .HasForeignKey("LawyerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("Lawyer");
                });

            modelBuilder.Entity("ProcedureMakerServer.Billing.StatementEntities.Activity", b =>
                {
                    b.HasOne("ProcedureMakerServer.Billing.StatementEntities.BillingElement", "BillingElement")
                        .WithMany()
                        .HasForeignKey("BillingElementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProcedureMakerServer.Billing.StatementEntities.Invoice", "Invoice")
                        .WithMany("Activities")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BillingElement");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("ProcedureMakerServer.Billing.StatementEntities.BillingElement", b =>
                {
                    b.HasOne("ProcedureMakerServer.Billing.StatementEntities.AccountStatement", "AccountStatement")
                        .WithMany()
                        .HasForeignKey("AccountStatementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountStatement");
                });

            modelBuilder.Entity("ProcedureMakerServer.Billing.StatementEntities.Invoice", b =>
                {
                    b.HasOne("ProcedureMakerServer.Billing.StatementEntities.AccountStatement", "AccountStatement")
                        .WithMany("Invoices")
                        .HasForeignKey("AccountStatementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountStatement");
                });

            modelBuilder.Entity("ProcedureMakerServer.Billing.StatementEntities.Payment", b =>
                {
                    b.HasOne("ProcedureMakerServer.Billing.StatementEntities.Invoice", "Invoice")
                        .WithMany("Payments")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("ProcedureMakerServer.Entities.CasePart", b =>
                {
                    b.HasOne("EFCoreBase.Entities.Case", "Case")
                        .WithMany("Participants")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("ProcedureMakerServer.Entities.Client", b =>
                {
                    b.HasOne("ProcedureMakerServer.Entities.Lawyer", "Lawyer")
                        .WithMany("Clients")
                        .HasForeignKey("LawyerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lawyer");
                });

            modelBuilder.Entity("ProcedureMakerServer.Entities.Lawyer", b =>
                {
                    b.HasOne("ProcedureMakerServer.Authentication.User", "User")
                        .WithOne()
                        .HasForeignKey("ProcedureMakerServer.Entities.Lawyer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProcedureMakerServer.Trusts.Trust", b =>
                {
                    b.HasOne("ProcedureMakerServer.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("ProcedureMakerServer.Trusts.TrustDisburse", b =>
                {
                    b.HasOne("ProcedureMakerServer.Trusts.Trust", "Trust")
                        .WithMany("Disburses")
                        .HasForeignKey("TrustId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trust");
                });

            modelBuilder.Entity("ProcedureMakerServer.Trusts.TrustPayment", b =>
                {
                    b.HasOne("ProcedureMakerServer.Trusts.Trust", "Trust")
                        .WithMany("Payments")
                        .HasForeignKey("TrustId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trust");
                });

            modelBuilder.Entity("EFCoreBase.Entities.Case", b =>
                {
                    b.Navigation("AccountStatement")
                        .IsRequired();

                    b.Navigation("Participants");
                });

            modelBuilder.Entity("ProcedureMakerServer.Authentication.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ProcedureMakerServer.Authentication.User", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ProcedureMakerServer.Billing.StatementEntities.AccountStatement", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("ProcedureMakerServer.Billing.StatementEntities.Invoice", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("ProcedureMakerServer.Entities.Client", b =>
                {
                    b.Navigation("Cases");
                });

            modelBuilder.Entity("ProcedureMakerServer.Entities.Lawyer", b =>
                {
                    b.Navigation("Cases");

                    b.Navigation("Clients");
                });

            modelBuilder.Entity("ProcedureMakerServer.Trusts.Trust", b =>
                {
                    b.Navigation("Disburses");

                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}
